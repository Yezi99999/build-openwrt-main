# OpenWrt 智能编译工作流 - 安全版本
# 支持通过Web界面触发的自动化编译

name: 🛠️ OpenWrt 智能编译

on:
  # 支持通过Repository Dispatch触发（来自Web界面）
  repository_dispatch:
    types: [web_build]
  
  # 支持手动触发
  workflow_dispatch:
    inputs:
      source_branch:
        description: "源码分支"
        required: true
        default: "openwrt-main"
        type: choice
        options:
          - openwrt-main
          - lede-master
          - immortalwrt-master
      
      target_device:
        description: "目标设备"
        required: true
        default: "x86_64"
        type: choice
        options:
          - x86_64
          - xiaomi_4a_gigabit
          - newifi_d2
          - rpi_4b
          - nanopi_r2s
      
      plugins_list:
        description: "插件列表(用逗号分隔)"
        required: false
        default: ""
        type: string
      
      build_description:
        description: "编译描述"
        required: false
        default: "智能编译"
        type: string

# 环境变量配置
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  # 准备阶段：解析配置和设置环境
  prepare:
    runs-on: ubuntu-20.04
    name: 📋 配置解析
    outputs:
      source_branch: ${{ steps.config.outputs.source_branch }}
      target_device: ${{ steps.config.outputs.target_device }}
      plugins_list: ${{ steps.config.outputs.plugins_list }}
      build_tag: ${{ steps.config.outputs.build_tag }}
      repo_url: ${{ steps.config.outputs.repo_url }}
      repo_branch: ${{ steps.config.outputs.repo_branch }}
      device_profile: ${{ steps.config.outputs.device_profile }}
      
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v3
      
      - name: ⚙️ 解析编译配置
        id: config
        run: |
          # 优先使用Repository Dispatch的配置，其次使用手动输入
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "🌐 检测到Web界面触发的编译请求"
            SOURCE_BRANCH="${{ github.event.client_payload.source_branch }}"
            TARGET_DEVICE="${{ github.event.client_payload.target_device }}"
            PLUGINS_LIST="${{ github.event.client_payload.plugins }}"
            BUILD_DESC="Web界面编译"
          else
            echo "🖱️ 检测到手动触发的编译请求"
            SOURCE_BRANCH="${{ github.event.inputs.source_branch }}"
            TARGET_DEVICE="${{ github.event.inputs.target_device }}"
            PLUGINS_LIST="${{ github.event.inputs.plugins_list }}"
            BUILD_DESC="${{ github.event.inputs.build_description }}"
          fi
          
          # 设置默认值
          SOURCE_BRANCH=${SOURCE_BRANCH:-"lede-master"}
          TARGET_DEVICE=${TARGET_DEVICE:-"x86_64"}
          PLUGINS_LIST=${PLUGINS_LIST:-""}
          BUILD_DESC=${BUILD_DESC:-"智能编译"}
          
          echo "📋 编译配置信息:"
          echo "  源码分支: $SOURCE_BRANCH"
          echo "  目标设备: $TARGET_DEVICE"
          echo "  插件列表: $PLUGINS_LIST"
          echo "  编译描述: $BUILD_DESC"
          
          # 根据源码分支设置仓库信息
          case $SOURCE_BRANCH in
            "openwrt-main")
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="openwrt-23.05"
              SOURCE_NAME="OpenWrt官方"
              ;;
            "lede-master")
              REPO_URL="https://github.com/coolsnowwolf/lede"
              REPO_BRANCH="master"
              SOURCE_NAME="Lean's LEDE"
              ;;
            "immortalwrt-master")
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="openwrt-23.05"
              SOURCE_NAME="ImmortalWrt"
              ;;
            *)
              echo "❌ 不支持的源码分支: $SOURCE_BRANCH"
              exit 1
              ;;
          esac
          
          # 根据目标设备设置配置文件
          case $TARGET_DEVICE in
            "x86_64")
              DEVICE_PROFILE="x86-64"
              DEVICE_NAME="X86_64"
              TARGET_SYSTEM="x86/64"
              ;;
            "xiaomi_4a_gigabit")
              DEVICE_PROFILE="xiaomi_mi-router-4a-gigabit"
              DEVICE_NAME="小米4A千兆版"
              TARGET_SYSTEM="ramips/mt7621"
              ;;
            "newifi_d2")
              DEVICE_PROFILE="newifi-d2"
              DEVICE_NAME="新路由3"
              TARGET_SYSTEM="ramips/mt7621"
              ;;
            "rpi_4b")
              DEVICE_PROFILE="rpi-4"
              DEVICE_NAME="树莓派4B"
              TARGET_SYSTEM="bcm27xx/bcm2711"
              ;;
            "nanopi_r2s")
              DEVICE_PROFILE="friendlyarm_nanopi-r2s"
              DEVICE_NAME="NanoPi_R2S"
              TARGET_SYSTEM="rockchip/armv8"
              ;;
            *)
              echo "❌ 不支持的目标设备: $TARGET_DEVICE"
              exit 1
              ;;
          esac
          
          # 生成构建标签
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BUILD_TAG="OpenWrt_${SOURCE_NAME// /}_${DEVICE_NAME// /_}_${TIMESTAMP}"
          
          # 输出变量
          echo "source_branch=$SOURCE_BRANCH" >> $GITHUB_OUTPUT
          echo "target_device=$TARGET_DEVICE" >> $GITHUB_OUTPUT
          echo "plugins_list=$PLUGINS_LIST" >> $GITHUB_OUTPUT
          echo "build_tag=$BUILD_TAG" >> $GITHUB_OUTPUT
          echo "repo_url=$REPO_URL" >> $GITHUB_OUTPUT
          echo "repo_branch=$REPO_BRANCH" >> $GITHUB_OUTPUT
          echo "device_profile=$DEVICE_PROFILE" >> $GITHUB_OUTPUT
          
          # 设置环境变量供后续步骤使用
          echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
          echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV
          echo "SOURCE_NAME=$SOURCE_NAME" >> $GITHUB_ENV
          echo "DEVICE_NAME=$DEVICE_NAME" >> $GITHUB_ENV
          echo "DEVICE_PROFILE=$DEVICE_PROFILE" >> $GITHUB_ENV
          echo "TARGET_SYSTEM=$TARGET_SYSTEM" >> $GITHUB_ENV
          echo "BUILD_TAG=$BUILD_TAG" >> $GITHUB_ENV
          echo "PLUGINS_LIST=$PLUGINS_LIST" >> $GITHUB_ENV
          
          echo "✅ 配置解析完成"

  # 编译阶段：实际的固件编译过程
  build:
    runs-on: ubuntu-20.04
    needs: prepare
    name: 🔨 固件编译
    
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v3

      - name: 🚀 初始化编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          echo "🔧 开始初始化编译环境..."
          
          # 清理Docker镜像释放空间
          docker rmi $(docker images -q) 2>/dev/null || true
          
          # 清理不必要的软件包
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null || true
          sudo -E apt-get -qq update
          sudo -E apt-get -qq purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          
          # 安装编译依赖
          sudo -E apt-get -qq install $(curl -fsSL https://is.gd/depend_ubuntu2204_openwrt)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          
          # 创建工作目录
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          
          echo "✅ 编译环境初始化完成"

      - name: 📦 克隆源码
        working-directory: /workdir
        run: |
          echo "📦 开始克隆源码..."
          echo "  仓库: ${{ needs.prepare.outputs.repo_url }}"
          echo "  分支: ${{ needs.prepare.outputs.repo_branch }}"
          
          df -hT $PWD
          git clone ${{ needs.prepare.outputs.repo_url }} -b ${{ needs.prepare.outputs.repo_branch }} openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          
          echo "✅ 源码克隆完成"

      - name: 🔧 加载自定义feeds
        run: |
          echo "🔧 配置自定义feeds..."
          
          # 如果存在自定义feeds配置文件则使用，否则使用默认配置
          if [ -f "feeds.conf.default" ]; then
            cp feeds.conf.default openwrt/feeds.conf.default
            echo "📋 使用自定义feeds配置"
          fi
          
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          echo "✅ feeds配置完成"

      - name: ⚙️ 生成编译配置
        run: |
          echo "⚙️ 开始生成编译配置..."
          cd openwrt
          
          # 生成基础配置
          make defconfig
          
          # 根据目标设备设置配置
          echo "CONFIG_TARGET_${{ needs.prepare.outputs.device_profile }}=y" >> .config
          
          # 设置基础系统配置
          cat >> .config << EOF
          CONFIG_DEVEL=y
          CONFIG_TOOLCHAINOPTS=y
          CONFIG_BUSYBOX_CUSTOM=y
          CONFIG_BUSYBOX_CONFIG_FEATURE_USERNAME_COMPLETION=y
          CONFIG_BUSYBOX_CONFIG_FEATURE_EDITING_SAVEHISTORY=y
          CONFIG_BUSYBOX_CONFIG_FEATURE_EDITING_VI=y
          CONFIG_COLLECT_KERNEL_DEBUG=y
          CONFIG_IB=y
          CONFIG_IMAGEOPT=y
          CONFIG_KERNEL_BUILD_USER="OpenWrt-Builder"
          CONFIG_KERNEL_BUILD_DOMAIN="GitHub-Actions"
          CONFIG_CCACHE=y
          EOF
          
          # 处理插件配置
          PLUGINS="${{ needs.prepare.outputs.plugins_list }}"
          if [ -n "$PLUGINS" ]; then
            echo "🔧 配置选中的插件..."
            IFS=',' read -ra PLUGIN_ARRAY <<< "$PLUGINS"
            for plugin in "${PLUGIN_ARRAY[@]}"; do
              plugin=$(echo "$plugin" | xargs) # 去除空格
              if [ -n "$plugin" ]; then
                echo "CONFIG_PACKAGE_$plugin=y" >> .config
                echo "  ✓ 添加插件: $plugin"
              fi
            done
          fi
          
          # 生成最终配置
          make defconfig
          
          echo "📋 最终配置文件："
          cat .config | grep -E "^CONFIG_TARGET|^CONFIG_PACKAGE.*=y" | head -20
          
          echo "✅ 编译配置生成完成"

      - name: 📥 下载依赖包
        id: package
        run: |
          echo "📥 开始下载依赖包..."
          cd openwrt
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          echo "✅ 依赖包下载完成"

      - name: 🔨 编译固件
        id: compile
        run: |
          echo "🔨 开始编译固件..."
          cd openwrt
          
          echo "使用 $(nproc) 线程编译"
          make -j$(nproc) V=s || make -j1 || make -j1 V=s
          
          echo "compile_status=success" >> $GITHUB_OUTPUT
          echo "✅ 固件编译完成"

      - name: 📊 检查空间使用
        if: (!cancelled())
        run: df -hT

      - name: 📦 整理编译产物
        id: organize
        if: steps.compile.outputs.compile_status == 'success'
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          
          # 计算固件大小
          FIRMWARE_SIZE=$(du -sh . | cut -f1)
          echo "FIRMWARE_SIZE=$FIRMWARE_SIZE" >> $GITHUB_ENV
          
          # 重命名固件文件
          for file in *; do
            if [[ "$file" == *.bin ]] || [[ "$file" == *.img ]] || [[ "$file" == *.gz ]]; then
              # 提取文件扩展名
              EXT="${file##*.}"
              # 生成新文件名
              TIMESTAMP=$(date +%Y%m%d_%H%M%S)
              SOURCE_NAME_CLEAN=$(echo "${SOURCE_NAME:-${{ env.SOURCE_NAME }}}" | tr -d ' ')
              DEVICE_NAME_CLEAN=$(echo "${DEVICE_NAME:-${{ env.DEVICE_NAME }}}" | tr ' ' '_')
              NEW_NAME="OpenWrt_${SOURCE_NAME_CLEAN}_${DEVICE_NAME_CLEAN}_${TIMESTAMP}.${EXT}"
              mv "$file" "$NEW_NAME"
              echo "📦 重命名: $file -> $NEW_NAME"
            fi
          done
          
          # 生成详细的固件信息文件
          cat > firmware_info.txt << EOF
          OpenWrt 智能编译固件信息
          ========================
          
          📋 基本信息:
          编译时间: $(date '+%Y-%m-%d %H:%M:%S')
          构建标签: ${{ needs.prepare.outputs.build_tag }}
          源码分支: ${{ env.SOURCE_NAME }}
          目标设备: ${{ env.DEVICE_NAME }}
          固件大小: ${FIRMWARE_SIZE}
          
          🔧 编译配置:
          选中插件: ${{ needs.prepare.outputs.plugins_list }}
          设备配置: ${{ needs.prepare.outputs.device_profile }}
          
          📱 默认信息:
          - 默认IP地址: 192.168.1.1
          - 默认用户名: root
          - 默认密码: password
          - 默认WiFi名: OpenWrt (如支持)
          - 默认WiFi密码: 无
          
          📖 使用说明:
          1. 刷机前请确认设备型号和硬件版本
          2. 建议先备份原厂固件
          3. 刷机有风险，请谨慎操作
          4. 如遇问题可尝试救砖操作
          
          🔗 相关链接:
          - 项目地址: https://github.com/${{ github.repository }}
          - OpenWrt官网: https://openwrt.org
          - 使用文档: https://github.com/${{ github.repository }}/wiki
          
          ⚠️ 免责声明:
          本固件仅供学习交流使用，使用者需自行承担刷机风险。
          EOF
          
          # 生成SHA256校验文件
          for file in OpenWrt_*.bin OpenWrt_*.img OpenWrt_*.gz; do
            if [ -f "$file" ]; then
              sha256sum "$file" >> sha256sums.txt
              echo "🔒 生成校验: $file"
            fi
          done
          
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
          echo "organize_status=success" >> $GITHUB_OUTPUT
          echo "✅ 编译产物整理完成"

      - name: ⬆️ 上传固件到 Artifacts
        uses: actions/upload-artifact@v3
        if: steps.organize.outputs.organize_status == 'success'
        with:
          name: ${{ needs.prepare.outputs.build_tag }}
          path: ${{ env.FIRMWARE_PATH }}
          retention-days: 7

      - name: 🎉 生成发布版本
        id: release
        if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.organize_status == 'success'
        run: |
          RELEASE_TAG="${{ needs.prepare.outputs.build_tag }}"
          RELEASE_NAME="OpenWrt 智能编译 - ${{ env.DEVICE_NAME }} ($(date '+%Y-%m-%d %H:%M'))"
          
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          
          echo "📋 发布信息:"
          echo "标签: $RELEASE_TAG"
          echo "名称: $RELEASE_NAME"

      - name: 📢 发布固件到 Releases
        uses: softprops/action-gh-release@v1
        if: steps.release.outputs.release_tag != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release.outputs.release_tag }}
          name: ${{ steps.release.outputs.release_name }}
          body_path: ${{ env.FIRMWARE_PATH }}/firmware_info.txt
          files: |
            ${{ env.FIRMWARE_PATH }}/OpenWrt_*
            ${{ env.FIRMWARE_PATH }}/sha256sums.txt
          draft: false
          prerelease: false

      - name: 📊 编译完成通知
        run: |
          echo "🎉 OpenWrt智能编译任务完成!"
          echo "📦 固件信息:"
          echo "  源码: ${{ env.SOURCE_NAME }}"
          echo "  设备: ${{ env.DEVICE_NAME }}"
          echo "  大小: ${{ env.FIRMWARE_SIZE }}"
          echo "  标签: ${{ needs.prepare.outputs.build_tag }}"
          echo ""
          echo "🔗 下载链接:"
          echo "  Artifacts: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "  Releases: https://github.com/${{ github.repository }}/releases/tag/${{ steps.release.outputs.release_tag }}"
          echo ""
          echo "📝 编译日志: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: 🧹 清理旧的工作流程记录
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 7
          keep_minimum_runs: 5
          token: ${{ secrets.GITHUB_TOKEN }}

# 编译失败处理
  failure_handler:
    runs-on: ubuntu-20.04
    needs: [prepare, build]
    if: failure()
    name: ❌ 编译失败处理
    
    steps:
      - name: 📝 生成失败报告
        run: |
          echo "❌ OpenWrt编译失败"
          echo "📋 失败信息:"
          echo "  源码: ${{ needs.prepare.outputs.source_branch }}"
          echo "  设备: ${{ needs.prepare.outputs.target_device }}"
          echo "  插件: ${{ needs.prepare.outputs.plugins_list }}"
          echo "  时间: $(date '+%Y-%m-%d %H:%M:%S')"
          echo ""
          echo "🔍 可能的失败原因:"
          echo "  1. 插件配置冲突"
          echo "  2. 设备存储空间不足"
          echo "  3. 网络连接问题"
          echo "  4. 源码或依赖包问题"
          echo ""
          echo "📖 解决建议:"
          echo "  1. 检查插件冲突检测结果"
          echo "  2. 减少选择的插件数量"
          echo "  3. 选择更稳定的源码分支"
          echo "  4. 查看详细的编译日志"
          echo ""
          echo "🔗 编译日志: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

# 编译成功处理
  success_handler:
    runs-on: ubuntu-20.04
    needs: [prepare, build]
    if: success()
    name: ✅ 编译成功处理
    
    steps:
      - name: 🎉 生成成功报告
        run: |
          echo "🎉 OpenWrt编译成功完成!"
          echo "📦 固件信息:"
          echo "  源码: ${{ needs.prepare.outputs.source_branch }}"
          echo "  设备: ${{ needs.prepare.outputs.target_device }}"
          echo "  插件: ${{ needs.prepare.outputs.plugins_list }}"
          echo "  标签: ${{ needs.prepare.outputs.build_tag }}"
          echo "  时间: $(date '+%Y-%m-%d %H:%M:%S')"
          echo ""
          echo "📥 下载方式:"
          echo "  1. GitHub Actions Artifacts (7天有效期)"
          echo "  2. GitHub Releases (长期保存)"
          echo ""
          echo "🔗 相关链接:"
          echo "  - Actions: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "  - Releases: https://github.com/${{ github.repository }}/releases"
          echo "  - 项目主页: https://github.com/${{ github.repository }}"