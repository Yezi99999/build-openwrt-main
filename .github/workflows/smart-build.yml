#========================================================================================================================
# OpenWrt 智能编译工作流 v2.0 - 解耦架构设计
# 特点: 统一入口点 | 配置驱动 | 自动修复 | 模块化设计
# 架构优势: 避免"牵一发而动全身"，提高可维护性和稳定性
#========================================================================================================================

name: 🎭 智能编译工作流 v2.0

# 触发条件 - 支持多种触发方式
on:
  # 仓库分发事件 (主要触发方式)
  repository_dispatch:
    types: [web_build, api_build, manual_build]
  
  # 工作流分发 (GitHub界面手动触发)
  workflow_dispatch:
    inputs:
      source_branch:
        description: '源码分支'
        required: true
        default: 'lede-master'
        type: choice
        options:
          - 'lede-master'
          - 'openwrt-main'
          - 'immortalwrt-master'
          - 'Lienol-master'
      target_device:
        description: '目标设备'
        required: true
        default: 'x86_64'
        type: choice
        options:
          - 'x86_64'
          - 'xiaomi_4a_gigabit'
          - 'newifi_d2'
          - 'rpi_4b'
          - 'nanopi_r2s'
      plugins:
        description: '插件列表 (逗号分隔)'
        required: false
        default: ''
        type: string
      enable_auto_fix:
        description: '启用自动修复'
        required: false
        default: true
        type: boolean
      description:
        description: '编译描述'
        required: false
        default: '手动触发编译'
        type: string

# 环境变量 - 全局配置
env:
  # 构建配置
  DEBIAN_FRONTEND: noninteractive
  TZ: Asia/Shanghai
  
  # GitHub Actions配置
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  FORCE_COLOR: 1
  
  # 构建编排器配置
  ORCHESTRATOR_VERSION: '1.0.0'
  AUTO_FIX_ENABLED: true
  VERBOSE_MODE: true

# 权限设置
permissions:
  contents: read
  actions: read
  packages: read

# 并发控制 - 避免资源冲突
concurrency:
  group: build-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

#========================================================================================================================
# 作业定义
#========================================================================================================================

jobs:
  # 配置解析和验证作业
  config-analysis:
    name: 📋 配置解析与验证
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    outputs:
      # 构建参数
      build_id: ${{ steps.parse.outputs.build_id }}
      source_branch: ${{ steps.parse.outputs.source_branch }}
      target_device: ${{ steps.parse.outputs.target_device }}
      plugins_list: ${{ steps.parse.outputs.plugins_list }}
      auto_fix_enabled: ${{ steps.parse.outputs.auto_fix_enabled }}
      build_description: ${{ steps.parse.outputs.build_description }}
      
      # 验证结果
      config_valid: ${{ steps.validate.outputs.config_valid }}
      device_supported: ${{ steps.validate.outputs.device_supported }}
      
      # 缓存配置
      cache_key: ${{ steps.cache.outputs.cache_key }}
      
    steps:
      - name: 🚀 检出代码仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: 📊 解析构建参数
        id: parse
        run: |
          echo "🔍 解析构建参数..."
          
          # 生成唯一构建ID
          BUILD_ID="build_$(date +%s)_${GITHUB_RUN_NUMBER}"
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          
          # 解析触发来源和参数
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            # Repository Dispatch 触发 (API/Web界面)
            SOURCE_BRANCH="${{ github.event.client_payload.source_branch || 'lede-master' }}"
            TARGET_DEVICE="${{ github.event.client_payload.target_device || 'x86_64' }}"
            PLUGINS_LIST="${{ github.event.client_payload.plugins || '' }}"
            AUTO_FIX="${{ github.event.client_payload.enable_auto_fix || 'true' }}"
            DESCRIPTION="${{ github.event.client_payload.description || 'API触发编译' }}"
            
            echo "📡 触发方式: Repository Dispatch (${{ github.event.action }})"
          else
            # Workflow Dispatch 触发 (GitHub界面)
            SOURCE_BRANCH="${{ github.event.inputs.source_branch }}"
            TARGET_DEVICE="${{ github.event.inputs.target_device }}"
            PLUGINS_LIST="${{ github.event.inputs.plugins }}"
            AUTO_FIX="${{ github.event.inputs.enable_auto_fix }}"
            DESCRIPTION="${{ github.event.inputs.description }}"
            
            echo "🖱️ 触发方式: Workflow Dispatch (手动触发)"
          fi
          
          # 设置输出变量
          echo "source_branch=$SOURCE_BRANCH" >> $GITHUB_OUTPUT
          echo "target_device=$TARGET_DEVICE" >> $GITHUB_OUTPUT
          echo "plugins_list=$PLUGINS_LIST" >> $GITHUB_OUTPUT
          echo "auto_fix_enabled=$AUTO_FIX" >> $GITHUB_OUTPUT
          echo "build_description=$DESCRIPTION" >> $GITHUB_OUTPUT
          
          # 显示解析结果
          echo "📋 构建配置:"
          echo "  构建ID: $BUILD_ID"
          echo "  源码分支: $SOURCE_BRANCH"
          echo "  目标设备: $TARGET_DEVICE"
          echo "  插件列表: ${PLUGINS_LIST:-无}"
          echo "  自动修复: $AUTO_FIX"
          echo "  编译描述: $DESCRIPTION"
      
      - name: ✅ 验证构建配置
        id: validate
        run: |
          echo "🔍 验证构建配置..."
          
          # 支持的设备列表
          SUPPORTED_DEVICES=("x86_64" "xiaomi_4a_gigabit" "newifi_d2" "rpi_4b" "nanopi_r2s")
          SUPPORTED_SOURCES=("lede-master" "openwrt-main" "immortalwrt-master" "Lienol-master")
          
          # 验证设备支持
          DEVICE_SUPPORTED=false
          for device in "${SUPPORTED_DEVICES[@]}"; do
            if [ "$device" = "${{ steps.parse.outputs.target_device }}" ]; then
              DEVICE_SUPPORTED=true
              break
            fi
          done
          
          # 验证源码分支
          SOURCE_SUPPORTED=false
          for source in "${SUPPORTED_SOURCES[@]}"; do
            if [ "$source" = "${{ steps.parse.outputs.source_branch }}" ]; then
              SOURCE_SUPPORTED=true
              break
            fi
          done
          
          # 验证插件格式 (基本检查)
          PLUGINS_VALID=true
          PLUGINS="${{ steps.parse.outputs.plugins_list }}"
          if [ -n "$PLUGINS" ]; then
            # 检查是否包含明显的无效字符
            if [[ "$PLUGINS" =~ [^a-zA-Z0-9,._-] ]]; then
              echo "⚠️ 插件列表包含可能无效的字符: $PLUGINS"
              PLUGINS_VALID=false
            fi
          fi
          
          # 总体配置有效性
          CONFIG_VALID=true
          if [ "$DEVICE_SUPPORTED" != "true" ]; then
            echo "❌ 不支持的设备: ${{ steps.parse.outputs.target_device }}"
            CONFIG_VALID=false
          fi
          
          if [ "$SOURCE_SUPPORTED" != "true" ]; then
            echo "❌ 不支持的源码分支: ${{ steps.parse.outputs.source_branch }}"
            CONFIG_VALID=false
          fi
          
          if [ "$PLUGINS_VALID" != "true" ]; then
            echo "❌ 插件列表格式无效"
            CONFIG_VALID=false
          fi
          
          # 设置输出
          echo "config_valid=$CONFIG_VALID" >> $GITHUB_OUTPUT
          echo "device_supported=$DEVICE_SUPPORTED" >> $GITHUB_OUTPUT
          
          # 显示验证结果
          if [ "$CONFIG_VALID" = "true" ]; then
            echo "✅ 配置验证通过"
          else
            echo "❌ 配置验证失败"
            exit 1
          fi
      

  # 构建准备作业
  build-preparation:
    name: 🛠️ 构建准备与配置生成
    runs-on: ubuntu-24.04
    timeout-minutes: 30
    needs: config-analysis
    if: needs.config-analysis.outputs.config_valid == 'true'
    outputs:
      config_generated: ${{ steps.orchestrator.outputs.config_generated }}
      build_ready: ${{ steps.orchestrator.outputs.build_ready }}
    
    steps:
      - name: 🚀 检出代码仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: 📦 安装系统依赖
        run: |
          echo "📦 安装系统依赖..."
          sudo apt-get update -qq
          sudo apt-get install -y jq curl wget git
          
          echo "✅ 系统依赖安装完成"
      
      - name: 🎭 初始化构建编排器
        run: |
          echo "🎭 初始化构建编排器..."
          
          # 确保编排器脚本存在且有执行权限
          if [ ! -f "script/build-orchestrator.sh" ]; then
            echo "❌ 构建编排器脚本不存在"
            echo "🔄 尝试使用传统方式..."
            
            # 回退到传统脚本组合
            chmod +x script/generate-config.sh 2>/dev/null || true
            chmod +x script/plugin-manager.sh 2>/dev/null || true
            exit 0
          fi
          
          chmod +x script/build-orchestrator.sh
          
          # 初始化配置系统
          ./script/build-orchestrator.sh config init
          
          echo "✅ 构建编排器初始化完成"
      
      - name: 🔧 执行构建编排
        id: orchestrator
        run: |
          echo "🔧 执行构建编排..."
          
          # 构建参数
          DEVICE="${{ needs.config-analysis.outputs.target_device }}"
          PLUGINS="${{ needs.config-analysis.outputs.plugins_list }}"
          SOURCE="${{ needs.config-analysis.outputs.source_branch }}"
          AUTO_FIX="${{ needs.config-analysis.outputs.auto_fix_enabled }}"
          
          # 执行编排器
          ORCHESTRATOR_ARGS=(
            "build"
            "--device" "$DEVICE"
            "--source" "$SOURCE"
            "--verbose"
          )
          
          # 添加插件参数
          if [ -n "$PLUGINS" ]; then
            ORCHESTRATOR_ARGS+=("--plugins" "$PLUGINS")
          fi
          
          # 添加自动修复参数
          if [ "$AUTO_FIX" = "true" ]; then
            ORCHESTRATOR_ARGS+=("--auto-fix")
          else
            ORCHESTRATOR_ARGS+=("--no-auto-fix")
          fi
          
          echo "🚀 执行: ./script/build-orchestrator.sh ${ORCHESTRATOR_ARGS[*]}"
          
          # 检查编排器是否可用
          if [ -f "script/build-orchestrator.sh" ]; then
            # 使用新架构
            if ./script/build-orchestrator.sh "${ORCHESTRATOR_ARGS[@]}"; then
              echo "config_generated=true" >> $GITHUB_OUTPUT
              echo "build_ready=true" >> $GITHUB_OUTPUT
              echo "✅ 构建编排成功"
            else
              echo "❌ 构建编排失败，尝试回退方案"
              echo "config_generated=false" >> $GITHUB_OUTPUT
              echo "build_ready=false" >> $GITHUB_OUTPUT
            fi
          else
            # 回退到传统方式
            echo "🔄 使用传统构建方式..."
            
            # 传统方式生成配置
            if [ -f "script/generate-config.sh" ]; then
              chmod +x script/generate-config.sh
              
              TRADITIONAL_ARGS=("$DEVICE" "$PLUGINS")
              if [ "$AUTO_FIX" = "true" ]; then
                TRADITIONAL_ARGS+=("--auto-fix")
              fi
              
              if ./script/generate-config.sh "${TRADITIONAL_ARGS[@]}"; then
                echo "config_generated=true" >> $GITHUB_OUTPUT
                echo "build_ready=true" >> $GITHUB_OUTPUT
                echo "✅ 传统方式构建准备成功"
              else
                echo "❌ 传统方式也失败"
                echo "config_generated=false" >> $GITHUB_OUTPUT
                echo "build_ready=false" >> $GITHUB_OUTPUT
                exit 1
              fi
            else
              echo "❌ 无可用的构建脚本"
              exit 1
            fi
          fi
      
      - name: 📋 验证生成的配置
        run: |
          echo "📋 验证生成的配置..."
          
          # 检查必需文件
          REQUIRED_FILES=(".config" "feeds.conf.default")
          ALL_FILES_EXIST=true
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ -f "$file" ]; then
              SIZE=$(stat -c%s "$file")
              echo "✅ $file 存在 ($SIZE 字节)"
            else
              echo "❌ $file 不存在"
              ALL_FILES_EXIST=false
            fi
          done
          
          if [ "$ALL_FILES_EXIST" = "true" ]; then
            echo "✅ 配置文件验证通过"
            
            # 显示配置摘要
            echo "📄 .config 文件前20行:"
            head -20 .config || true
            echo "..."
            
            echo "📄 feeds.conf.default 内容:"
            cat feeds.conf.default || true
          else
            echo "❌ 配置文件验证失败"
            exit 1
          fi

          # 复制.config文件并且重命名为config.default
          cp .config config.default
          echo "✅ .config 文件已复制为 config.default"
      
      - name: 📤 上传构建配置
        uses: actions/upload-artifact@v4
        with:
          name: build-configs-${{ needs.config-analysis.outputs.build_id }}
          path: |
            config.default
            feeds.conf.default
            config/build.json
            logs/build-orchestrator.log
          retention-days: 7
          if-no-files-found: error

  # 主要编译作业
  main-build:
    name: 🔨 编译固件 [${{ needs.config-analysis.outputs.source_branch }}][${{ needs.config-analysis.outputs.target_device }}]
    runs-on: ubuntu-24.04
    timeout-minutes: 360
    needs: [config-analysis, build-preparation]
    if: needs.build-preparation.outputs.build_ready == 'true'
    
    env:
      SOURCE_BRANCH: ${{ needs.config-analysis.outputs.source_branch }}
      TARGET_DEVICE: ${{ needs.config-analysis.outputs.target_device }}
      PLUGINS_LIST: ${{ needs.config-analysis.outputs.plugins_list }}
      BUILD_ID: ${{ needs.config-analysis.outputs.build_id }}
    
    steps:
      - name: 🚀 检出代码仓库
        uses: actions/checkout@v4
      
      - name: 💾 优化编译环境
        run: |
          echo "💾 优化编译环境..."
          
          # 显示系统信息
          echo "🖥️ 系统资源:"
          echo "  CPU: $(nproc) 核心"
          echo "  内存: $(free -h | awk '/^Mem:/ {print $2}')"
          echo "  磁盘: $(df -h / | awk 'NR==2 {print $4}')"
          
          # 清理空间
          sudo rm -rf /opt/ghc /usr/local/lib/android /usr/share/dotnet /etc/mysql /etc/php
          sudo apt-get clean
          
          # 设置Git配置
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          echo "✅ 环境优化完成"
      
      - name: 📥 下载构建配置
        uses: actions/download-artifact@v4
        with:
          name: build-configs-${{ env.BUILD_ID }}
          path: ./configs/
      
      - name: 🔧 应用构建配置
        run: |
          echo "🔧 应用构建配置..."
          
          # 检查配置文件
          if [ ! -f "configs/config.default" ]; then
            echo "❌ 构建配置文件不存在"
            ls -la configs/
            exit 1
          fi
          
          # 应用配置
          cp configs/config.default ./.config
          cp configs/feeds.conf.default ./
          
          # 设置权限
          chmod 644 .config feeds.conf.default
          
          echo "✅ 构建配置应用完成"
      
      - name: 📦 下载源码
        run: |
          echo "📦 下载 OpenWrt 源码..."
          
          case "${{ env.SOURCE_BRANCH }}" in
            "lede-master")
              git clone --depth 1 https://github.com/coolsnowwolf/lede.git openwrt
              ;;
            "openwrt-main")
              git clone --depth 1 https://github.com/openwrt/openwrt.git openwrt
              ;;
            "immortalwrt-master")
              git clone --depth 1 https://github.com/immortalwrt/immortalwrt.git openwrt
              ;;
            "Lienol-master")
              git clone --depth 1 https://github.com/Lienol/openwrt.git openwrt
              ;;
            *)
              echo "❌ 不支持的源码分支: ${{ env.SOURCE_BRANCH }}"
              exit 1
              ;;
          esac
          
          cd openwrt
          echo "✅ 源码下载完成"
          echo "📊 源码信息:"
          echo "  分支: $(git branch --show-current)"
          echo "  提交: $(git rev-parse --short HEAD)"
          echo "  大小: $(du -sh . | cut -f1)"
      
      - name: 🔄 更新和安装 Feeds
        run: |
          cd openwrt
          
          echo "🔄 复制 feeds 配置..."
          cp ../feeds.conf.default ./

          echo "🔄 复制 config 配置..."
          cp ../.config ./

          echo "📋 当前feeds配置:"
          cat feeds.conf.default

          echo "📋 编译配置预览:"
          head -30 openwrt/.config
          
          echo "🔄 更新 feeds..."
          ./scripts/feeds update -a
          
          echo "📦 安装 feeds..."
          ./scripts/feeds install -a
          
          echo "✅ Feeds 更新完成"

      - name: 🔧 第一阶段自定义脚本
        run: |
          echo "🔧 执行第一阶段自定义脚本..."
          cd openwrt
          
          # 根据源码分支执行相应的自定义操作
          case "${{ needs.prepare.outputs.source_branch }}" in
            "openwrt-main")
              echo "🔧 OpenWrt官方源码自定义配置..."
              # 删除可能冲突的包
              rm -rf package/utils/{ucode,fbtest} || true
              ;;
            "lede-master")
              echo "🔧 Lean's LEDE源码自定义配置..."
              # 删除可能冲突的包
              rm -rf package/lean/{samba4,luci-app-samba4,luci-app-ttyd} || true
              ;;
            "immortalwrt-master")
              echo "🔧 ImmortalWrt源码自定义配置..."
              # 删除可能冲突的包
              rm -rf package/emortal/{autosamba,ipv6-helper} || true
              ;;
            "Lienol-master")
              echo "🔧 Lienol源码自定义配置..."
              # 添加特定配置
              ;;
          esac
          
          echo "✅ 第一阶段自定义脚本执行完成"

      - name: 🔧 第二阶段自定义脚本
        run: |
          echo "🔧 执行第二阶段自定义脚本..."
          cd openwrt
          
          # 修改默认IP地址（根据设备类型可能需要不同配置）
          case "${{ needs.prepare.outputs.target_device }}" in
            "x86_64")
              echo "🔧 配置X86设备默认参数..."
              sed -i 's/192.168.1.1/192.168.50.1/g' package/base-files/files/bin/config_generate || true
              ;;
            *)
              echo "🔧 配置路由器设备默认参数..."
              # 保持默认IP 192.168.1.1 对于路由器设备通常更合适
              ;;
          esac
          
          # 修改默认主机名
          sed -i "s/OpenWrt/${{ needs.prepare.outputs.device_name }}/g" package/base-files/files/bin/config_generate || true
          
          # 修改时区
          sed -i "s/'UTC'/'CST-8'/g" package/base-files/files/bin/config_generate || true
          
          echo "✅ 第二阶段自定义脚本执行完成"
  
      - name: 📋 生成配置
        run: |
          cd openwrt
          echo "📋 生成最终配置..."
          make defconfig
          
          echo "📋 配置差异对比:"
          ./scripts/diffconfig.sh || true

      - name: 📥 下载依赖包
        run: |
          cd openwrt
          echo "📥 下载编译依赖包..."
          make download -j8
          
          # 检查下载结果
          find dl -size -1024c -exec ls -l {} \; || true
  
      
      - name: 🔨 编译固件
        run: |
          cd openwrt
          
          echo "🔨 开始编译固件..."
          echo "⏰ 开始时间: $(date)"
          
          # 根据设备类型调整编译参数
          case "${{ env.TARGET_DEVICE }}" in
            "x86_64")
              MAKE_JOBS=$(nproc)
              ;;
            "rpi_4b"|"nanopi_r2s")
              MAKE_JOBS=$(($(nproc) * 3 / 4))  # ARM设备使用75%的核心
              ;;
            *)
              MAKE_JOBS=$(($(nproc) / 2))      # 低配设备使用50%的核心
              ;;
          esac
          
          echo "🔧 使用 $MAKE_JOBS 个并发任务"
          
          # 执行编译
          make -j$MAKE_JOBS V=s
          
          echo "✅ 固件编译完成"
          echo "⏰ 结束时间: $(date)"
      
      - name: 📊 检查编译结果
        run: |
          cd openwrt
          
          echo "📊 检查编译结果..."
          
          # 查找固件文件
          FIRMWARE_PATH="bin/targets/*/*"
          if ls $FIRMWARE_PATH/*.img.gz 2>/dev/null || ls $FIRMWARE_PATH/*.bin 2>/dev/null; then
            echo "✅ 固件编译成功"
            
            echo "📦 固件文件:"
            ls -lah $FIRMWARE_PATH/ | grep -E '\.(img\.gz|bin|vmdk|vdi)$' || true
            
            # 计算文件大小
            TOTAL_SIZE=$(du -sh bin/targets/ | cut -f1)
            echo "📏 总大小: $TOTAL_SIZE"
          else
            echo "❌ 未找到固件文件"
            echo "📋 bin/targets 目录内容:"
            ls -la bin/targets/*/ || true
            exit 1
          fi
      
      - name: 📤 上传固件
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt-${{ env.TARGET_DEVICE }}-${{ env.BUILD_ID }}
          path: |
            openwrt/bin/targets/*/*
            !openwrt/bin/targets/*/*/packages
          retention-days: 7
          if-no-files-found: error
      
      - name: 📋 生成编译报告
        if: always()
        run: |
          echo "📋 生成编译报告..."
          
          # 创建报告文件
          cat > build-report.md << EOF
          # 🔨 OpenWrt 编译报告
          
          ## 📊 基本信息
          - **构建ID**: ${{ env.BUILD_ID }}
          - **目标设备**: ${{ env.TARGET_DEVICE }}
          - **源码分支**: ${{ env.SOURCE_BRANCH }}
          - **插件列表**: ${{ env.PLUGINS_LIST || '无' }}
          - **编译时间**: $(date '+%Y-%m-%d %H:%M:%S')
          - **编译状态**: ${{ job.status }}
          
          ## 🎯 编译结果
          EOF
          
          cd openwrt 2>/dev/null || true
          
          if [ -d "bin/targets" ]; then
            echo "### ✅ 编译成功" >> ../build-report.md
            echo "**固件文件:**" >> ../build-report.md
            ls bin/targets/*/*/*.{img.gz,bin,vmdk,vdi} 2>/dev/null | while read file; do
              size=$(stat -c%s "$file" 2>/dev/null | numfmt --to=iec || echo "未知")
              echo "- $(basename "$file") ($size)" >> ../build-report.md
            done
          else
            echo "### ❌ 编译失败" >> ../build-report.md
          fi
          
          echo "✅ 编译报告已生成"
      
      - name: 📤 上传编译报告
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-report-${{ env.BUILD_ID }}
          path: build-report.md
          retention-days: 30
          if-no-files-found: warn

  # 清理和通知作业
  cleanup-and-notify:
    name: 🧹 清理与通知
    runs-on: ubuntu-24.04
    needs: [config-analysis, build-preparation, main-build]
    if: always()
    
    steps:
      - name: 📊 分析构建结果
        run: |
          echo "📊 分析构建结果..."
          
          CONFIG_RESULT="${{ needs.config-analysis.result }}"
          PREP_RESULT="${{ needs.build-preparation.result }}"
          BUILD_RESULT="${{ needs.main-build.result }}"
          
          echo "🔍 各阶段结果:"
          echo "  配置分析: $CONFIG_RESULT"
          echo "  构建准备: $PREP_RESULT"
          echo "  主要编译: $BUILD_RESULT"
          
          # 设置总体状态
          if [ "$BUILD_RESULT" = "success" ]; then
            echo "OVERALL_STATUS=success" >> $GITHUB_ENV
            echo "✅ 整体编译成功"
          elif [ "$CONFIG_RESULT" = "failure" ]; then
            echo "OVERALL_STATUS=config_failed" >> $GITHUB_ENV
            echo "❌ 配置阶段失败"
          elif [ "$PREP_RESULT" = "failure" ]; then
            echo "OVERALL_STATUS=preparation_failed" >> $GITHUB_ENV
            echo "❌ 准备阶段失败"
          else
            echo "OVERALL_STATUS=build_failed" >> $GITHUB_ENV
            echo "❌ 编译阶段失败"
          fi
      
      - name: 🧹 清理工作空间
        run: |
          echo "🧹 清理工作空间..."
          
          # 清理大文件
          sudo rm -rf openwrt/build_dir openwrt/tmp 2>/dev/null || true
          
          # 显示剩余空间
          echo "💾 剩余磁盘空间:"
          df -h /
          
          echo "✅ 清理完成"
      
      - name: 📢 构建状态通知
        if: env.OVERALL_STATUS == 'success'
        run: |
          echo "📢 构建成功通知"
          echo "🎉 OpenWrt 固件编译成功！"
          echo "📦 设备: ${{ needs.config-analysis.outputs.target_device }}"
          echo "🌿 分支: ${{ needs.config-analysis.outputs.source_branch }}"
          echo "🔗 下载链接: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      
      - name: 📢 构建失败通知
        if: env.OVERALL_STATUS != 'success'
        run: |
          echo "📢 构建失败通知"
          echo "❌ OpenWrt 固件编译失败"
          echo "📦 设备: ${{ needs.config-analysis.outputs.target_device }}"
          echo "🌿 分支: ${{ needs.config-analysis.outputs.source_branch }}"
          echo "🔗 日志链接: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "📋 失败阶段: ${{ env.OVERALL_STATUS }}"